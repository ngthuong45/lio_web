name: Deploy Production

on:
  # opening a pull request to master and develop branch will be a trigger
  pull_request:
    branches:
      - main
  # any code pushed to master and develop branch will also be a trigger
  push:
    branches:
      - main

jobs:
  format-and-test:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Check Python version # checking the python version to see if 3.x is installed.
      run: python --version
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run Tests
      run: |
        python manage.py test

  deploy:

    runs-on: ubuntu-latest
    needs: [ format-and-test ] # will be fired if and only if format-and-test is passed.
    if: ${{ github.event_name == 'push' }} # will be fired if the trigger event is a push event.

    steps:
      - name: Checkout Code # checking out code.
        uses: actions/checkout@v2

      # Digital Ocean
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_PRODUCTION_IP }}
          username: ${{ secrets.SERVER_PRODUCTION_USERNAME }}
          password: ${{ secrets.SERVER_PRODUCTION_PASSWORD }}
          script: |
            source /usr/local/lsws/Example/html/bin/activate
            cd /usr/local/lsws/Example/html/lio_web
            git pull https://${{ secrets.__GITHUB_PERSONAL_TOKEN }}@github.com/ngthuong45/lio_web.git main
            pip install -r requirements.txt
            sudo rm -rf .env.prod
            echo "DEBUG=1" >> .env.prod
            echo "SECRET_KEY=${{ secrets.SECRET_KEY_PROD }}" >> .env.prod
            echo "BASE_URL=${{ secrets.BASE_URL_PROD }}" >> .env.prod
            echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS_PROD }}" >> .env.prod
            echo "SQL_ENGINE=django.db.backends.postgresql" >> .env.prod
            echo "SQL_DATABASE=${{ secrets.POSTGRESQL_DATABASE_PROD }}" >> .env.prod
            echo "SQL_USER=${{ secrets.POSTGRESQL_USER_PROD }}" >> .env.prod
            echo "SQL_PASSWORD=${{ secrets.POSTGRESQL_PASSWORD_PROD }}" >> .env.prod
            echo "SQL_HOST=${{ secrets.POSTGRESQL_HOST_PROD }}" >> .env.prod
            echo "SQL_PORT=${{ secrets.POSTGRESQL_PORT_PROD }}" >> .env.prod
            echo "ZALO_URL_SECRET_KEY=${{ secrets.ZALO_URL_SECRET_KEY_PROD }}" >> .env.prod
            echo "ZALO_APP_ID=${{ secrets.ZALO_APP_ID_PROD }}" >> .env.prod
            echo "ZALO_APP_KEY=${{ secrets.ZALO_APP_KEY_PROD }}" >> .env.prod
            echo "ZALO_OA_SECRET_KEY=${{ secrets.ZALO_OA_SECRET_KEY_PROD }}" >> .env.prod
            python manage.py migrate
            python manage.py collectstatic --noinput
            sudo chown -R nobody:nogroup /usr/local/lsws/Example/html/lio_web
            sudo killall lswsgi
